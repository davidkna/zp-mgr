"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,i){function a(e,t){try{var r=u[e](t),l=r.value}catch(e){return void i(e)}r.done?n(l):Promise.resolve(l).then(o,function(e){a("throw",e)})}function o(e){a("next",e)}var u=e.apply(t,r);o()})}}exports.__esModule=!0,exports.cleanupTask=exports.writeTask=exports.downloadTasks=void 0;var _path=_interopRequireDefault(require("path")),_entries=_interopRequireDefault(require("lodash/entries")),_fsExtra=_interopRequireDefault(require("fs-extra")),_includes=_interopRequireDefault(require("lodash/includes")),_mkdirp=_interopRequireDefault(require("mkdirp")),_toml=_interopRequireDefault(require("toml")),_index=require("./index");const{configFile:configFile,downloadDir:downloadDir,sourceFile:sourceFile}=_index.paths;(0,_mkdirp.default)(downloadDir);const config=_toml.default.parse(_fsExtra.default.readFile(configFile,"utf8")),plugins=(0,_entries.default)(config),targetEntries=new Array(plugins.length),downloadTasks=plugins.map((e,t)=>({title:`Downloading ${e[1].github||e[1]}...`,task:()=>_asyncToGenerator(function*(){plugins[t]=new _index.Plugin(e),(yield _fsExtra.default.pathExists(plugins[t].downloadPath))?yield plugins[t].update():yield plugins[t].download(),targetEntries[t]=yield plugins[t].entry()})()}));exports.downloadTasks=downloadTasks;let writeTask=(()=>{var e=_asyncToGenerator(function*(){yield _fsExtra.default.writeFile(sourceFile,`${targetEntries.join("\n")}`)});return function(){return e.apply(this,arguments)}})();exports.writeTask=writeTask;let cleanupTask=(()=>{var e=_asyncToGenerator(function*(){const e=[...plugins.map(e=>e.name),"plugins.zsh"],t=yield _fsExtra.default.readDir(downloadDir);t&&t.filter(t=>!(0,_includes.default)(e,t)).forEach(e=>_fsExtra.default.removeSync(_path.default.join(downloadDir,e)))});return function(){return e.apply(this,arguments)}})();exports.cleanupTask=cleanupTask;