"use strict";function t(t){return t&&t.__esModule?t:{default:t}}var e=require("crypto"),n=t(e),s=require("path"),i=t(s),r=require("execa"),u=t(r),a=require("glob"),o=t(a),l=require("fs-jetpack"),c=t(l),f=require("lodash.includes"),h=t(f),d=require("listr"),g=t(d),p=require("mkdirp"),m=t(p),z=require("xdg-basedir"),j=t(z);const k=i.default.join(j.default.data,"zsh_plugins");(0,m.default)(k);let w=["Tarrasch/zsh-colors","zsh-users/zsh-syntax-highlighting","zsh-users/zsh-history-substring-search","zsh-users/zsh-completions","mafredri/zsh-async","sindresorhus/pure"];class q{constructor(t){this.name=t;const e=n.default.createHash("sha1");e.update(t),this.hash=e.digest("hex")}get clonePath(){return i.default.join(k,this.hash)}}const y=[],x=[],b=new g.default([{title:"Getting Paths for Cloning",task:function(){w=w.map((t=>new q(t)))}},{title:"Cleaning up",task:function(){const t=w.map((t=>t.hash));t.push("plugins.zsh");const e=c.default.list(k);e&&e.filter((e=>!(0,h.default)(t,e))).forEach((t=>c.default.remove(i.default.join(k,t))))}},{title:"Cloning Plugins",task:function(){return new g.default(w.map((t=>{const e=t.name,n=t.clonePath;return{title:`Cloning ${e}...`,task:function(){switch(c.default.exists(i.default.join(n,".git"))){case!1:return c.default.exists(n)&&c.default.remove(n),(0,u.default)("git",["clone","--recursive","--",`https://github.com/${e}.git`,n]);case"dir":return u.default.sync("git",["fetch","--all"],{cwd:n}),(0,u.default)("git",["reset","--hard","origin/master","--"],{cwd:n});default:throw new Error("Invalid clone target!")}}}})),{concurrent:!0})}},{title:"Getting zsh File ready",task:function(){return new g.default(w.map((t=>{return{title:`Getting ${t.name} ready...`,task:function(){const e=t.name.split("/")[1],n=[`${e}.plugin.zsh`,"*.plugin.zsh","init.zsh","*.zsh","*.sh"];x.push(t.clonePath);for(let s=0;s<n.length;s++){const e=o.default.sync(i.default.join(t.clonePath,n[s]));if(0!==e.length){y.push(e[0]);break}}}}})),{concurrent:!0})}},{title:`Writing ${i.default.join(k,"plugins.zsh")}`,task:function(){return c.default.writeAsync(i.default.join(k,"plugins.zsh"),y.map((t=>`source ${t}`)).join("\n")+"\n"+x.map((t=>`fpath+=${t}`)).join("\n"))}}]);b.run().catch((t=>{console.error(t),process.exit(1)}));
