"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var _crypto=require("crypto"),_crypto2=_interopRequireDefault(_crypto),_path=require("path"),_path2=_interopRequireDefault(_path),_execa=require("execa"),_execa2=_interopRequireDefault(_execa),_glob=require("glob"),_glob2=_interopRequireDefault(_glob),_fsJetpack=require("fs-jetpack"),_fsJetpack2=_interopRequireDefault(_fsJetpack),_listr=require("listr"),_listr2=_interopRequireDefault(_listr),_mkdirp=require("mkdirp"),_mkdirp2=_interopRequireDefault(_mkdirp),_rimraf=require("rimraf"),_rimraf2=_interopRequireDefault(_rimraf),_xdgBasedir=require("xdg-basedir"),_xdgBasedir2=_interopRequireDefault(_xdgBasedir);const e=_path2.default.join(_xdgBasedir2.default.data,"zsh_plugins");(0,_mkdirp2.default)(e);let t=["Tarrasch/zsh-colors","zsh-users/zsh-syntax-highlighting","zsh-users/zsh-history-substring-search","zsh-users/zsh-completions","mafredri/zsh-async","sindresorhus/pure"];class r{constructor(e){this.name=e;const t=_crypto2.default.createHash("sha1");t.update(e),this.hash=t.digest("hex")}get clonePath(){return _path2.default.join(e,this.hash)}}const i=[],n=[],a=new _listr2.default([{title:"Getting Paths for Cloning",task(){t=t.map((e=>new r(e)))}},{title:"Cleaning up",task(){const r=t.map((e=>e.hash));r.push("plugins.zsh");const i=_fsJetpack2.default.list(e);null!==i&&i.filter((e=>!r.includes(e))).forEach((t=>(0,_rimraf2.default)(_path2.default.join(e,t))))}},{title:"Cloning Plugins",task(){return new _listr2.default(t.map((e=>{const{name,clonePath}=e;return{title:`Cloning ${name}...`,task(){switch(_fsJetpack2.default.exists(clonePath)){case!1:return(0,_execa2.default)("git",["clone","--recursive","--",`https://github.com/${name}.git`,clonePath]);case"dir":return _execa2.default.sync("git",["fetch","--all"],{cwd:clonePath}),(0,_execa2.default)("git",["reset","--hard","origin/master"],{cwd:clonePath});default:throw new Error("Invalid clone target!")}}}})),{concurrent:!0})}},{title:"Getting zsh File ready",task(){return new _listr2.default(t.map((e=>{return{title:`Getting ${e.name} ready...`,task(){const t=e.name.split("/")[1],r=[`${t}.plugin.zsh`,"*.plugin.zsh","init.zsh","*.zsh","*.sh"];n.push(e.clonePath);for(let a=0;a<r.length;a++){const t=_glob2.default.sync(_path2.default.join(e.clonePath,r[a]));if(0!==t.length){i.push(t[0]);break}}}}})),{concurrent:!0})}},{title:`Writing ${_path2.default.join(e,"plugins.zsh")}`,task(){return _fsJetpack2.default.writeAsync(_path2.default.join(e,"plugins.zsh"),i.map((e=>`source ${e}`)).join("\n")+"\n"+n.map((e=>`fpath+=${e}`)).join("\n"))}}]);a.run().catch((e=>{console.error(e)}));