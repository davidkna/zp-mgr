"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var _crypto=require("crypto"),_crypto2=_interopRequireDefault(_crypto),_path=require("path"),_path2=_interopRequireDefault(_path),_execa=require("execa"),_execa2=_interopRequireDefault(_execa),_glob=require("glob"),_glob2=_interopRequireDefault(_glob),_fsJetpack=require("fs-jetpack"),_fsJetpack2=_interopRequireDefault(_fsJetpack),_listr=require("listr"),_listr2=_interopRequireDefault(_listr),_mkdirp=require("mkdirp"),_mkdirp2=_interopRequireDefault(_mkdirp),_rimraf=require("rimraf"),_rimraf2=_interopRequireDefault(_rimraf),_xdgBasedir=require("xdg-basedir"),_xdgBasedir2=_interopRequireDefault(_xdgBasedir);const cloneDir=_path2.default.join(_xdgBasedir2.default.data,"zsh_plugins");(0,_mkdirp2.default)(cloneDir);let plugins=["Tarrasch/zsh-colors","zsh-users/zsh-syntax-highlighting","zsh-users/zsh-history-substring-search","zsh-users/zsh-completions","mafredri/zsh-async","sindresorhus/pure"];class Plugin{constructor(name){this.name=name;const sha1=_crypto2.default.createHash("sha1");sha1.update(name),this.hash=sha1.digest("hex")}get clonePath(){return _path2.default.join(cloneDir,this.hash)}}const sourceables=[],fpaths=[],tasks=new _listr2.default([{title:"Getting Paths for Cloning",task(){plugins=plugins.map((plugin=>new Plugin(plugin)))}},{title:"Cleaning up",task(){const legalNames=plugins.map((plugin=>plugin.hash));legalNames.push("plugins.zsh");const list=_fsJetpack2.default.list(cloneDir);null!==list&&list.filter((name=>!legalNames.includes(name))).forEach((name=>(0,_rimraf2.default)(_path2.default.join(cloneDir,name))))}},{title:"Cloning Plugins",task(){return new _listr2.default(plugins.map((plugin=>{const{name,clonePath}=plugin;return{title:`Cloning ${name}...`,task(){switch(_fsJetpack2.default.exists(clonePath)){case!1:return(0,_execa2.default)("git",["clone","--recursive","--",`https://github.com/${name}.git`,clonePath]);case"dir":return _execa2.default.sync("git",["fetch","--all"],{cwd:clonePath}),(0,_execa2.default)("git",["reset","--hard","origin/master"],{cwd:clonePath});default:throw new Error("Invalid clone target!")}}}})),{concurrent:!0})}},{title:"Getting zsh File ready",task(){return new _listr2.default(plugins.map((plugin=>{return{title:`Getting ${plugin.name} ready...`,task(){const name=plugin.name.split("/")[1],globs=[`${name}.plugin.zsh`,"*.plugin.zsh","init.zsh","*.zsh","*.sh"];fpaths.push(plugin.clonePath);for(let i=0;i<globs.length;i++){const list=_glob2.default.sync(_path2.default.join(plugin.clonePath,globs[i]));if(0!==list.length){sourceables.push(list[0]);break}}}}})),{concurrent:!0})}},{title:`Writing ${_path2.default.join(cloneDir,"plugins.zsh")}`,task(){return _fsJetpack2.default.writeAsync(_path2.default.join(cloneDir,"plugins.zsh"),sourceables.map((s=>`source ${s}`)).join("\n")+"\n"+fpaths.map((f=>`fpath+=${f}`)).join("\n"))}}]);tasks.run().catch((err=>{console.error(err)}));